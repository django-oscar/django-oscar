=======================
Oscar 1.6 release notes
=======================

:release: tbd

Welcome to Oscar 1.6


Table of contents:

.. contents::
    :local:
    :depth: 1


.. _compatibility_of_1.6:

Compatibility
-------------

Oscar 1.6 is compatible with Django 1.11 and 2.0 as well as Python 2.7, 3.4,
3.5 and 3.6. Django 1.8, 1.9 and 1.10 are no longer supported.


.. _new_in_1.6:

What's new in Oscar 1.6?
------------------------


Removal of deprecated features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 - ``oscar.core.validators.validate_password`` was removed.
   Use ``django.contrib.auth.password_validation.validate_password`` instead.

 - ``oscar.core.validators.CommonPasswordValidator`` was removed. Use ``django.contrib.auth.password_validation.CommonPasswordValidator`` instead.

 - The ``num_orders`` property was removed from ``oscar.apps.address.models.UserAddress``.
   Use ``num_orders_as_shipping_address`` and ``num_orders_as_billing_address`` instead.


Minor changes
~~~~~~~~~~~~~

 - The majority of the Oscar imports now use dynamic loading, instead of
   direct importing, for better extensibility and customisability.

 - Customer transaction emails now use a basic HTML template.

.. _incompatible_in_1.6:

Backwards incompatible changes in Oscar 1.6
-------------------------------------------

 - ``oscar.apps.customer.auth_backends.EmailBackend`` now rejects inactive users
   (where ``User.is_active`` is ``False``).

 - ``EmailBackend`` no longer enforces its own password strength validation,
   and relies instead on the ``AUTH_PASSWORD_VALIDATORS`` setting used by Django.

 - ``oscar.apps.basket.middleware.BasketMiddleware`` was rewritten as new-style
   middleware for Django 1.11.

 - ``oscar.apps.offer.models.ConditionalOffer`` now has a new flag
   ``exclusive`` to denote that the offer involved can not be combined on the
   same item on the same basket line with another offer.
   This flag is used by ``oscar.apps.basket.utils.LineOfferConsumer``, a facade
   that supercedes the old ``oscar.apps.basket.models.Line._affected_items`` counter,
   and replaces it with a more finegrained approach. This makes it possible to apply
   two distinct non-exclusive offers on the same basketline items, for example
   multiple distinct vouchers.
   A couple of methods on the basketline model have been extended with an
   optional ``offer`` argument, i.e. ``discount`` and ``consume``, so if you
   are using a customized basketline model, you have to update your methods'
   signatures.

 - Invalid URL names supplied to the ``OSCAR_DASHBOARD_NAVIGATION`` setting
   are now logged as an exception (previously they were silently ignored).
   The offending menu item will be skipped during menu rendering.
   In Oscar 1.8 the exception will be raised without being intercepted.

 - All signals are now loaded directly rather than using the dynamic importer.

Dependency changes
------------------

- Support for Django 1.8, 1.9 and 1.10 have been dropped in line with the
  Django project recommendation for third party apps.
